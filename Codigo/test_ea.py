
# -- coding: utf-8 --
"""
Created on
@author: Alexandra,Andreia,Catarina,Daniela
"""

'''
@package docstring
Implementação de testes do algoritmo evolucionário aplicado
aos motifs
'''


"""
Class: EAMotif
"""


import unittest
from fileinput import filename
from msilib.schema import File
from numpy import vectorize
from EvolAlgorithm import EvolAlgorithm
from Popul import PopulInt, PopulReal
from motiffinding import MotifFinding
from mymotifs import MyMotifs
from EAMotifs import EAMotifsInt
from EAMotifs import EAMotifsReal
from os import chdir
chdir(r'c:\Users\Catarina Ferreira\Desktop\Algotimos\aula6')

class EAMotif (unittest.TestCase):

	def setUp(self):
		self.ea1 = EAMotifsInt(100, 10, 50, "exemploMotifs.txt")
		#self.ea2 = EAMotifsReal(100, 2000, 50, "exemploMotifs.txt")
		self.ea3 = EvolAlgorithm(100, 10, 50, 1000)

	def test_run(self):
		self.assertEqual(self.ea1.run(), 'Iteration: 2   Best:  25, Iteration: 3   Best:  25, Iteration: 4   Best:  26, Iteration: 5   Best:  27, Iteration: 6   Best:  27, Iteration: 7   Best:  26, Iteration: 8   Best:  26, Iteration: 9   Best:  26, Iteration: 10   Best:  26')
		self.assertEqual(self.ea2.run(), 'Iteration: 0   Best:  0.006398961633890656, Iteration: 1   Best:  0.0077835133032388365, Iteration: 2   Best:  0.0077835133032388365, Iteration: 3   Best:  0.0077835133032388365, Iteration: 4   Best:  0.008162562601383925, Iteration: 5   Best:  0.012381829203981842, Iteration: 6   Best:  0.01363352160101159, Iteration: 7   Best:  0.014063493676650952, Iteration: 8   Best:  0.014063493676650952, Iteration: 9   Best:  0.014708323007795357, Iteration: 10   Best:  0.029843155217138456, Iteration: 11   Best:  0.04279128577809303, Iteration: 12   Best:  0.04279128577809303, Iteration: 13   Best:  0.04583341713419581, Iteration: 14   Best:  0.04583341713419581, Iteration: 15   Best:  0.04583341713419581, Iteration: 16   Best:  0.04583341713419581, Iteration: 17   Best:  0.04583341713419581, Iteration: 18   Best:  0.04583341713419581, Iteration: 19   Best:  0.049490199864243745, Iteration: 20   Best:  0.049490199864243745')
		self.assertEqual(self.ea3.run(), 'Iteration: 0   Best:  541.0, Iteration: 1   Best:  541.0, Iteration: 2   Best:  547.0, Iteration: 3   Best:  547.0, Iteration: 4   Best:  547.0, Iteration: 5   Best:  548.0, Iteration: 6   Best:  553.0, Iteration: 7   Best:  563.0, Iteration: 8   Best:  563.0, Iteration: 9   Best:  577.0, Iteration: 10   Best:  569.0')


	def test_printBestSolution(self):
		self.assertEqual(self.ea1.printBestSolution(), 'Best solution:  [22, 2, 20, 4, 38], Best fitness: 27')
		self.assertEqual(self.ea2.printBestSolution(),'Best solution:  [0.018302026708193253, 0.9469496290447983, 0.10018020846453779, 0.05586184576230657, 0.10446759259084859, 0.30373549911882136, 0.7478903943865329, 0.09752695146779145, 0.08557151736014368, 0.0238272095415073, 0.4128015385541346, 0.027593807897878908, 0.6161821058472501, 0.4951426559164167, 0.13918858974845094, 0.18487834043700002, 0.135428690553845, 0.8831221838422937, 0.009095323262742205, 0.19316945567981936, 0.13146852482556426, 0.1669130244290682, 0.15433751536317086, 0.8688823688371357, 0.12775033342476794, 0.7845084995121837, 0.0016846519831128504, 0.0021094168648660983, 0.9519621527618557, 0.060105778930531706, 0.13515479003609876, 0.1250143697713063], Best fitness: 0.049490199864243745')
		self.assertEqual(self.ea3.printBestSolution(), 'Best solution:  [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], Best fitness: 577.0')

if __name__ == '__main__':
    unittest.main()


